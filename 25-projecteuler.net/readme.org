#+title: https://projecteuler.net/
#+author: michaeltd
#+date: <2019-10-06 Sun>

[[https://projecteuler.net/profile/MichaelTd.png]]

* Multiples of 3 and 5

Problem 1

If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.

Find the sum of all the multiples of 3 or 5 below 1000.

#+BEGIN_SRC C
#include <stdio.h>

int main(void) {
  int mo3a5 = 0;

  for (int i = 999 ; i > 0; i--)
    if (i % 3 == 0 || i % 5 == 0)
      mo3a5 += i;

  printf("%d\n", mo3a5);
  return (0);
}


/*
total_sum = 0
for i in range(1000):
    if (i%3 == 0 or i%5 == 0):
        total_sum = total_sum+i
print total_sum
*/

#+END_SRC

* Even Fibonacci numbers

Problem 2

Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

#+BEGIN_SRC C
#include <stdio.h>

int main(void) {

  long long int sum = 0, tmp = 1, a = 1, b = 1;

  while (tmp <= 4000000) {
    if(tmp % 2 == 0)
      sum += tmp;
    tmp = a + b;
    a = b;
    b = tmp;
  }

  printf("%lld\n", sum);
  return (0);
}

#+END_SRC

#+RESULTS:
: 4613732

* Largest prime factor

Problem 3

The prime factors of 13195 are 5, 7, 13 and 29.

What is the largest prime factor of the number 600851475143 ?

#+BEGIN_SRC C
#include <stdio.h>

int main(void) {
  long long n = 600851475143;
  int factor = 2;
  int lastFactor = 1;
  while (n > 1) {
    if (n % factor == 0) {
      lastFactor = factor;
      n /= factor;
      while (n % factor == 0)
        n /= factor;
    }
    factor++;
  }
  printf ("%d\n", lastFactor);
  return (0);
}
#+END_SRC

#+RESULTS:
: 6857

* Largest palindrome product

Problem 4

A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

Find the largest palindrome made from the product of two 3-digit numbers.

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

int is_palindrome(unsigned int num) {
  unsigned int reversed = 0;
  unsigned int original = num;

  if (num < 10)
    return 1;
  if (num % 10 == 0)
    return 0;

  while (num >= 1) {
    reversed = (reversed * 10) + (num % 10);
    num /= 10;
  }

  if (original == reversed)
    return 1;
  else
    return 0;
}

int main(int argc, char *argv[]) {
  unsigned int max_palindrome = 0;
  unsigned int a, b, prod;

  unsigned long int c = 10000;

  while (c > 0) {
    a = 999;
    while (a > 99) {
      b = 999;
      while (b >= a) {
        prod = a*b;
        if (prod > max_palindrome && is_palindrome(prod)) {
          max_palindrome = prod;
        }
        b--;
      }
      a--;
    }
    c--;
  }

  printf("%d\n", max_palindrome);

  return 0;
}

#+END_SRC

#+RESULTS:
: 906609

* Smallest multiple

Problem 5

2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

#+BEGIN_SRC C
#include <stdio.h>

int main(void) {

    int i = 1;

    while (i %  2 != 0 || i %  3 != 0 || i %  4 != 0 || i %  5 != 0 || i %  6 != 0 || i %  7 != 0 || i %  8 != 0 || i %  9 != 0 || i % 10 != 0 || i % 11 != 0 || i % 12 != 0 || i % 13 != 0 || i % 14 != 0 || i % 15 != 0 || i % 16 != 0 || i % 17 != 0 || i % 18 != 0 || i % 19 != 0 || i % 20 != 0 ) {

        i++;

    }

    printf("%d\n", i);

    return (0);
}

#+END_SRC

#+RESULTS:
: 232792560

* Sum square difference

Problem 6

The sum of the squares of the first ten natural numbers is,
12 + 22 + ... + 102 = 385

The square of the sum of the first ten natural numbers is,
(1 + 2 + ... + 10)2 = 552 = 3025

Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

#+BEGIN_SRC C
#include <stdio.h>

int main(void) {

    int sum = 0, squared = 0, result = 0;
    const int N = 100;

    /* Brute force
    for (int i = 1; i <= N; i++) {
        sum += i;
        squared += i * i;
    }
    */

    ///*/ formula
    sum = N * (N+1)/ 2;
    squared = (N * (N + 1) * (2 * N + 1)) / 6;
    //*/

    result = sum * sum - squared;

    printf("%d\n", result);
    return (0);
}

#+END_SRC

#+RESULTS:
: 25164150

* 10001st prime
   
Problem 7

By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

What is the 10 001st prime number?

#+BEGIN_SRC C
#include <stdio.h>
#include <stdlib.h>

int main(void) {
  char *sleve;
  size_t i;
  unsigned count = 0;
  size_t n = 1000000;
  const unsigned target = 10001;

  sleve = calloc(n, sizeof *sleve);
  for (i = 2; i < n; i++) {
    if (!sleve[i]) {
      size_t j;

      count++;
      if (count == target) {
        printf("%lu\n", i);
        break;
      }
      for (j = i*2; j < n; j += i) {
        sleve[j] = 1;
      }
    }
  }
  //free(sleve);

  return 0;
}
#+END_SRC

#+RESULTS:
: 104743

Congratulations, the answer you gave to problem 7 is correct.

You are the 397605th person to have solved this problem.

This problem had a difficulty rating of 5%. The highest difficulty rating you have solved remains at 5%.

Return to Problems page.

* Largest product in a series
   
Problem 8

The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

#+BEGIN_SRC C
  #include <stdio.h>

  int main(void)
  {
    char str[] =
      "73167176531330624919225119674426574742355349194934"
      "96983520312774506326239578318016984801869478851843"
      "85861560789112949495459501737958331952853208805511"
      "12540698747158523863050715693290963295227443043557"
      "66896648950445244523161731856403098711121722383113"
      "62229893423380308135336276614282806444486645238749"
      "30358907296290491560440772390713810515859307960866"
      "70172427121883998797908792274921901699720888093776"
      "65727333001053367881220235421809751254540594752243"
      "52584907711670556013604839586446706324415722155397"
      "53697817977846174064955149290862569321978468622482"
      "83972241375657056057490261407972968652414535100474"
      "82166370484403199890008895243450658541227588666881"
      "16427171479924442928230863465674813919123162824586"
      "17866458359124566529476545682848912883142607690042"
      "24219022671055626321111109370544217506941658960408"
      "07198403850962455444362981230987879927244284909188"
      "84580156166097919133875499200524063689912560717606"
      "05886116467109405077541002256983155200055935729725"
      "71636269561882670428252483600823257530420752963450";
    size_t len = sizeof str - 1;
    size_t i;
    unsigned max = 0;

    for (i = 0; i < len-4; i++) {
      unsigned p = 1;
      size_t j;

      for (j = 0; j < 4; j++) {
      p *= (unsigned)(str[i+j]-'0');
      }
      if (p > max) {
      max = p;
      }
      printf("%u\n", max);
      return 0;
  }
#+END_SRC

#+RESULTS:
: 5832
