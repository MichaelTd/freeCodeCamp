const dataUrl = 'https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/cyclist-data.json'

const margin = {
  top: 25,
  right: 120,
  bottom: 50,
  left: 50
}

const width = d3.select(".card").node().getBoundingClientRect().width - margin.right - margin.left;
const height = 650 - margin.top - margin.bottom;
const colors = {
  circle: '#3498db',
  highlight: '#84F092'
}

function buildGraph(ds) {
  const tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(d => `<span><strong>${d.Name}</strong>: ${d.Nationality}</span><br/>Year: ${d.Year}, Time: ${d.Time}<br/><br/><em>${d.Doping}</em>`);
  
  const formatMinutes = (d) => {
    const minutes = Math.floor(d / 60);
    const seconds = d - (minutes * 60);
    const output = `${minutes < 10 ? '0' + minutes : minutes}:${seconds < 10 ? '0' + seconds : seconds}`;
    
    return output;
  }
  
  const minSeconds = d3.min(ds, d => d.Seconds);
  
  const xScale = d3.scale.linear()
                        .domain([d3.max(ds, d => d.Seconds) - minSeconds + 20, d3.min(ds, d => d.Seconds) - minSeconds])
                        .range([0, width]);
  
  const yScale = d3.scale.linear()
                  .domain([d3.max(ds, d => d.Place + 1), d3.min(ds, d => d.Place)])
                  .range([height, 0]);
  
  const xAxisGen = d3.svg.axis().scale(xScale).orient('bottom').tickFormat(formatMinutes).ticks(6);
  const yAxisGen = d3.svg.axis().scale(yScale).orient('left');
  
  const svg = d3.select('.chart')
                  .attr({
                    width: width + margin.right + margin.left,
                    height: height + margin.top + margin.bottom,
                  })
                  .append('g')
                  .attr('transform', `translate(${margin.left}, ${margin.top})`)
                  .call(tip);
  
  const xAxis = svg.append('g').call(xAxisGen)
                  .attr({
                    class: 'x axis',
                    transform: `translate(0, ${height})`
                  });
  
  const yAxis = svg.append('g').call(yAxisGen)
                  .attr({
                    class: 'y axis',
                    // transform: `translate(${margin.left}, 0)`
                  });
  
  svg.append("text")
    .attr({
      'text-anchor': 'middle',
      'transform': 'translate(-30, 20)rotate(-90)'
    })
    .text('Ranking');
  
  svg.append("text")
    .attr({
      'text-anchor': 'middle',
      'transform': `translate(${width / 2}, ${height + 43})`
    })
    .text('Minutes Behind Fastest Time');

  const viz = svg.selectAll('.circle')
    .data(ds)
    .enter()
    .append('circle')
      .attr({
        class: 'circle',
        cx: d => xScale(d.Seconds - minSeconds),
        cy: d => yScale(d.Place),
        r: 5,
        fill: d => d.Doping ? 'red' : 'black'
      })
    .on('mouseover', function(d) {
      d3.select(this).attr({
        'stroke': '#000',
        'stroke-width': '2px'
      });
      tip.show(d);
    })
    .on('mouseout', function(d) { 
      d3.select(this).attr('stroke', null);
      tip.hide(d);
    })
  
  const labels = svg.selectAll('.label')
    .data(ds)
    .enter()
    .append('text')
      .attr({
        x: d => xScale(d.Seconds - minSeconds) + 10,
        y: d => yScale(d.Place) + 4,
        'font-size': '10px'
      })
      .text(d => d.Name)
  
  // Legend
  svg.append('circle')
    .attr({
      transform: 'translate(30,20)',
      cx: 0,
      cy: 0,
      r: 5,
      fill: 'red'
    })
   
  svg.append("text")
    .attr({
      'text-anchor': 'middle',
      'transform': 'translate(120, 25)',
      'font-size': '12px'
    })
    .text('Riders with doping allegations');
   
  svg.append('circle')
    .attr({
      transform: 'translate(30,23)',
      cx: 0,
      cy: 15,
      r: 5,
      fill: 'black'
    })
    
  svg.append("text")
    .attr({
      'text-anchor': 'middle',
      'transform': 'translate(98, 43)',
      'font-size': '12px'
    })
    .text('No doping allegations');
          
}


d3.json(dataUrl, (err, data) => {
  if (err) throw err;
  
  buildGraph(data);
});